"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eas_build_job_1 = require("@expo/eas-build-job");
const core_1 = require("@oclif/core");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const fs_extra_1 = require("fs-extra");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const generated_1 = require("../../graphql/generated");
const BuildQuery_1 = require("../../graphql/queries/BuildQuery");
const AppPlatform_1 = require("../../graphql/types/AppPlatform");
const log_1 = tslib_1.__importDefault(require("../../log"));
const prompts_1 = require("../../prompts");
const run_1 = require("../../run/run");
const download_1 = require("../../utils/download");
const json_1 = require("../../utils/json");
class Download extends EasCommand_1.default {
    static description = 'download simulator/emulator builds for a given fingerprint hash';
    static flags = {
        fingerprint: core_1.Flags.string({
            description: 'Fingerprint hash of the build to download',
            required: true,
        }),
        platform: core_1.Flags.enum({
            char: 'p',
            options: [eas_build_job_1.Platform.IOS, eas_build_job_1.Platform.ANDROID],
        }),
        'dev-client': core_1.Flags.boolean({
            description: 'Filter only dev-client builds.',
            allowNo: true,
        }),
        ...flags_1.EasNonInteractiveAndJsonFlags,
    };
    static contextDefinition = {
        ...this.ContextOptions.LoggedIn,
        ...this.ContextOptions.ProjectId,
    };
    async runAsync() {
        const { flags: { json: jsonFlag, platform, fingerprint, 'dev-client': developmentClient, 'non-interactive': nonInteractive, }, } = await this.parse(Download);
        const { loggedIn: { graphqlClient }, projectId, } = await this.getContextAsync(Download, {
            nonInteractive,
        });
        if (jsonFlag) {
            (0, json_1.enableJsonOutput)();
        }
        const selectedPlatform = await resolvePlatformAsync({ nonInteractive, platform });
        const build = await this.getBuildAsync({
            graphqlClient,
            projectId,
            platform: selectedPlatform,
            fingerprintHash: fingerprint,
            developmentClient,
        });
        const buildArtifactPath = await this.getPathToBuildArtifactAsync(build, selectedPlatform);
        if (jsonFlag) {
            const jsonResults = { path: buildArtifactPath };
            (0, json_1.printJsonOnlyOutput)(jsonResults);
        }
        else {
            log_1.default.log(`Build downloaded to ${chalk_1.default.bold(buildArtifactPath)}`);
        }
    }
    async getBuildAsync({ graphqlClient, projectId, platform, fingerprintHash, developmentClient, }) {
        const builds = await BuildQuery_1.BuildQuery.viewBuildsOnAppAsync(graphqlClient, {
            appId: projectId,
            filter: {
                platform,
                fingerprintHash,
                status: generated_1.BuildStatus.Finished,
                simulator: platform === generated_1.AppPlatform.Ios ? true : undefined,
                distribution: platform === generated_1.AppPlatform.Android ? generated_1.DistributionType.Internal : undefined,
                developmentClient,
            },
            offset: 0,
            limit: 1,
        });
        if (builds.length === 0) {
            throw new core_1.Errors.CLIError(`No builds available for ${platform} with fingerprint hash ${fingerprintHash}`);
        }
        log_1.default.succeed(`ðŸŽ¯ Found successful build with matching fingerprint on EAS servers.`);
        return builds[0];
    }
    async getPathToBuildArtifactAsync(build, platform) {
        const cachedBuildArtifactPath = (0, run_1.getEasBuildRunCachedAppPath)(build.project.id, build.id, platform);
        if (await (0, fs_extra_1.pathExists)(cachedBuildArtifactPath)) {
            log_1.default.newLine();
            log_1.default.log(`Using cached build...`);
            return cachedBuildArtifactPath;
        }
        if (!build.artifacts?.applicationArchiveUrl) {
            throw new Error('Build does not have an application archive url');
        }
        return await (0, download_1.downloadAndMaybeExtractAppAsync)(build.artifacts.applicationArchiveUrl, platform, cachedBuildArtifactPath);
    }
}
exports.default = Download;
async function resolvePlatformAsync({ nonInteractive, platform, }) {
    if (nonInteractive && !platform) {
        throw new Error('Platform must be provided in non-interactive mode');
    }
    if (platform) {
        return (0, AppPlatform_1.toAppPlatform)(platform);
    }
    const { selectedPlatform } = await (0, prompts_1.promptAsync)({
        type: 'select',
        message: 'Select platform',
        name: 'selectedPlatform',
        choices: [
            { title: 'Android', value: generated_1.AppPlatform.Android },
            { title: 'iOS', value: generated_1.AppPlatform.Ios },
        ],
    });
    return selectedPlatform;
}
